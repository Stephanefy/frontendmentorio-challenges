{
  "version": 3,
  "sources": ["../../little-state-machine/src/logic/storeFactory.ts", "../../little-state-machine/src/constants.ts", "../../little-state-machine/src/StateMachineContext.tsx", "../../little-state-machine/src/stateMachine.tsx"],
  "sourcesContent": ["import { PERSIST_OPTION, STORE_DEFAULT_NAME } from '../constants';\nimport { GlobalState, StateMachineOptions } from '../types';\n\nfunction StoreFactory() {\n  let options: StateMachineOptions = {\n    name: STORE_DEFAULT_NAME,\n    middleWares: [],\n    persist: PERSIST_OPTION.ACTION,\n  };\n  let state: GlobalState = {};\n\n  try {\n    options.storageType =\n      typeof sessionStorage !== 'undefined' ? window.sessionStorage : undefined;\n  } catch {}\n\n  return {\n    updateStore(defaultValues: GlobalState) {\n      try {\n        state =\n          (options.storageType &&\n            JSON.parse(options.storageType.getItem(options.name!) || '')) ||\n          defaultValues;\n      } catch {\n        state = defaultValues;\n      }\n    },\n    saveStore() {\n      options.storageType &&\n        options.storageType.setItem(options.name!, JSON.stringify(state));\n    },\n    get state() {\n      return state;\n    },\n    set state(value) {\n      state = value;\n    },\n    get options() {\n      return options;\n    },\n    set options(value) {\n      options = value;\n    },\n  };\n}\n\nexport default StoreFactory();\n", "export const STORE_DEFAULT_NAME = '__LSM__';\nexport const STORE_ACTION_NAME = '__LSM_NAME__';\nexport const PERSIST_OPTION = {\n  NONE: 'none',\n  ACTION: 'action',\n  UNLOAD: 'beforeUnload',\n} as const;\n", "import * as React from 'react';\nimport storeFactory from './logic/storeFactory';\nimport { StateMachineContextValue } from './types';\nimport { PERSIST_OPTION } from './constants';\n\ntype PropsChildren = {\n  children?: React.ReactNode;\n};\n\nconst StateMachineContext = React.createContext<StateMachineContextValue>(\n  undefined as any,\n);\n\nexport const StateMachineProvider: React.FC<PropsChildren> = ({ children }) => {\n  const [state, setState] = React.useState(storeFactory.state);\n\n  React.useEffect(() => {\n    if (storeFactory.options.persist === PERSIST_OPTION.UNLOAD) {\n      window.onbeforeunload = () => storeFactory.saveStore();\n      storeFactory.options.storageType &&\n        storeFactory.options.storageType.removeItem(storeFactory.options.name!);\n    }\n  }, []);\n\n  return (\n    <StateMachineContext.Provider value={{ state, setState }}>\n      {children}\n    </StateMachineContext.Provider>\n  );\n};\n\nexport const useStateMachineContext = () =>\n  React.useContext<StateMachineContextValue>(StateMachineContext);\n", "import * as React from 'react';\nimport { useStateMachineContext } from './StateMachineContext';\nimport storeFactory from './logic/storeFactory';\nimport {\n  StateMachineOptions,\n  GlobalState,\n  AnyCallback,\n  AnyActions,\n  ActionsOutput,\n} from './types';\nimport { PERSIST_OPTION, STORE_ACTION_NAME } from './constants';\n\nexport function createStore(\n  defaultState: GlobalState,\n  options?: StateMachineOptions,\n) {\n  if (options) {\n    storeFactory.options = {\n      ...storeFactory.options,\n      ...options,\n    };\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof window !== 'undefined') {\n      window.__LSM_NAME__ = storeFactory.options.name;\n      window.__LSM_RESET__ = () =>\n        storeFactory.options.storageType &&\n        storeFactory.options.storageType.removeItem(storeFactory.options.name!);\n    }\n  }\n\n  storeFactory.updateStore(defaultState);\n}\n\nconst actionTemplate =\n  <TCallback extends AnyCallback>(\n    setState: React.Dispatch<React.SetStateAction<GlobalState>>,\n    callback: TCallback,\n  ) =>\n  (payload: Parameters<TCallback>[1], options?: { skipRender: boolean }) => {\n    if (process.env.NODE_ENV !== 'production') {\n      window[STORE_ACTION_NAME] = callback.name;\n    }\n\n    storeFactory.state = callback(storeFactory.state, payload);\n\n    if (storeFactory.options.middleWares) {\n      storeFactory.state = storeFactory.options.middleWares.reduce(\n        (currentValue, currentFunction) =>\n          currentFunction(currentValue, callback.name, payload) || currentValue,\n        storeFactory.state,\n      );\n    }\n\n    (!options || !options.skipRender) && setState(storeFactory.state);\n\n    if (storeFactory.options.persist === PERSIST_OPTION.ACTION) {\n      storeFactory.saveStore();\n    }\n  };\n\nexport function useStateMachine<\n  TCallback extends AnyCallback,\n  TActions extends AnyActions<TCallback>,\n>(\n  actions?: TActions,\n): {\n  actions: ActionsOutput<TCallback, TActions>;\n  state: GlobalState;\n  getState: () => GlobalState;\n} {\n  const { state, setState } = useStateMachineContext();\n  const actionsRef = React.useRef(\n    Object.entries(actions || {}).reduce(\n      (previous, [key, callback]) =>\n        Object.assign({}, previous, {\n          [key]: actionTemplate(setState, callback),\n        }),\n      {} as ActionsOutput<TCallback, TActions>,\n    ),\n  );\n\n  return {\n    actions: actionsRef.current,\n    state,\n    getState: React.useCallback(() => storeFactory.state, []),\n  };\n}\n"],
  "mappings": "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",
  "names": ["options", "name", "middleWares", "persist", "state", "storageType", "sessionStorage", "window", "undefined", "e", "updateStore", "defaultValues", "JSON", "parse", "getItem", "saveStore", "setItem", "stringify", "value", "StoreFactory", "StateMachineContext", "createContext", "StateMachineProvider", "o", "children", "useState", "storeFactory", "setState", "useEffect", "onbeforeunload", "removeItem", "React", "Provider", "createStore", "defaultState", "__LSM_NAME__", "__LSM_RESET__", "useStateMachine", "actions", "r", "useContext", "actionsRef", "useRef", "Object", "entries", "reduce", "previous", "assign", "callback", "payload", "currentValue", "currentFunction", "skipRender", "current", "getState", "useCallback"]
}
